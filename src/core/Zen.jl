#
# Project : Pansy
# Source  : Zen.jl
# Author  : Li Huang (lihuang.dmft@gmail.com)
# Status  : Unstable
# Comment :
#
# Last modified: 2021/01/17
#

module Zen

#
# Using standard libraries
#
using LinearAlgebra
using Distributed
using Printf
using Dates

#
# Using third-party libraries
#
# Remarks:
#
# The TOML package is included in the standard library since v1.6.
# So, please upgrade your julia environment if it is outdated.
#
using TOML

#
# global.jl
#
# Summary:
#
# Define some global numerical or string constants
#
# Members:
#
# I32, I64    -> Numerical types (integer)
# F32, F64    -> Numerical types (float)
# C32, C64    -> Numerical types (complex)
# __LIBNAME__ -> Name of this library
# __VERSION__ -> Version of this library
# __RELEASE__ -> Released date of this library
# __AUTHORS__ -> Authors of this library
#
include("global.jl")
#
export I32, I64
export F32, F64
export C32, C64
export __LIBNAME__
export __VERSION__
export __RELEASE__
export __AUTHORS__

#
# types.jl
#
# Summary:
#
# Define some dicts and structs, which store the config parameters or
# represent some essential data structures.
#
# Members:
#
# PCASE        -> Dict for case
# PDFT         -> Dict for dft engine
# PDMFT        -> Dict for dmft engine
# PIMP         -> Dict for quantum impurities
# PSOLVER      -> Dict for quantum impurity solvers
# KohnShamData -> Dict for storing Kohn-Sham data
# IterInfo     -> Struct for iteration information
# Lattice      -> Struct for crystallography information
# PrTrait      -> Struct for projectors
# PrGroup      -> Struct for groups of projectors
# PrGroupT     -> Struct for groups of projectors (transformed)
#
include("types.jl")
#
export PCASE
export PDFT
export PDMFT
export PIMP
export PSOLVER
export KohnShamData
export IterInfo
export Lattice
export PrTrait
export PrGroup
export PrGroupT

#
# config.jl
#
# Summary:
#
# To extract the configurations from external files or dictionaries.
#
# Members:
#
# setup    -> Setup parameters
# exhibit  -> Display parameters for reference
# inp_toml -> Parse case.toml, return raw configuration information
# new_dict -> Update dicts of configuration
# chk_dict -> Check dicts of configuration
# _v       -> Verify dict's values
# cat_c    -> Print dict (PCASE)
# cat_d    -> Print dict (PDFT)
# cat_m    -> Print dict (PDMFT)
# cat_i    -> Print dict (PIMP)
# cat_s    -> Print dict (PSOLVER)
# get_c    -> Extract value from dict (PCASE), return original value
# get_d    -> Extract value from dict (PDFT), return original value
# get_m    -> Extract value from dict (PDMFT), return original value
# get_i    -> Extract value from dict (PIMP), return original value
# get_s    -> Extract value from dict (PSOLVER), return original value
# str_c    -> Extract value from dict (PCASE), return string
# str_d    -> Extract value from dict (PDFT), return string
# str_m    -> Extract value from dict (PDMFT), return string
# str_i    -> Extract value from dict (PIMP), return string
# str_s    -> Extract value from dict (PSOLVER), return string
#
include("config.jl")
#
export setup
export exhibit
export inp_toml
export new_dict
export chk_dict
export _v
export cat_c
export cat_d
export cat_m
export cat_i
export cat_s
export get_c
export get_d
export get_m
export get_i
export get_s
export str_c
export str_d
export str_m
export str_i
export str_s

#
# util.jl
#
# Summary:
#
# to provide some useful utility functions. they can be used to query
# the environments, print the configurations, and parse the strings, etc.
#
# Members:
#
# @cswitch      -> C-style switch
# require       -> check julia envirnoment
# query_args    -> query arguments
# query_inps    -> query input files
# query_stop    -> query case.stop file
# query_zen     -> query home directory of zen
# query_dft     -> query home directory of dft engine
# welcome       -> print welcome message
# overview      -> print overview of zen
# goodbye       -> say goodbye
# sorry         -> say sorry
# message       -> print some message to the screen
# line_to_array -> transform a line to a string array
#
include("util.jl")
#
export @cswitch
export require
export query_args
export query_inps
export query_zen
export query_dft
export welcome
export overview
export goodbye
export sorry
export message
export line_to_array

#
# base.jl
#
# to provide the core functions to control the dft engine, dmft engine,
# and impurity solver
#
# summary:
#
# make_trees   -> make working directories
# rm_trees     -> remove working directories
# adaptor_init -> init dft_dmft adaptor
# adaptor_run  -> launch dft_dmft adaptor
# adaptor_save -> backup files generated by dft_dmft adaptor
# dft_init     -> init dft engine
# dft_run      -> launch dft engine
# dft_save     -> backup files generated by dft engine
# dmft_init    -> init dmft engine
# dmft_run     -> launch dmft engine
# dmft_save    -> backup files generated by dmft engine
# solver_init  -> init quantum impurity solver
# solver_run   -> launch quantum impurity solver
# solver_save  -> backup files generated by quantum impurity solver
#
include("base.jl")
#
export make_trees
export rm_trees
export adaptor_init
export adaptor_run
export adaptor_save
export dft_init
export dft_run
export dft_save
export dmft_init
export dmft_run
export dmft_save
export solver_init
export solver_run
export solver_save

#
# ir.jl
#
# adaptor for the intermediate representation format
#
# summary:
#
# ir_adaptor   -> adaptor support
# irio_lattice -> write lattice information
# irio_kmesh   -> write kmesh
# irio_tetra   -> write tetrahedra
# irio_eigen   -> write eigenvalues
# irio_projs   -> write projectors
# irio_fermi   -> write fermi level
# irio_charge  -> write charge density
#
include("ir.jl")
#
export ir_adaptor
export irio_lattice
export irio_kmesh
export irio_tetra
export irio_eigen
export irio_projs
export irio_fermi
export irio_charge

#
# plo.jl
#
# tools for the projection on localized orbitals scheme
#
# summary:
#
# plo_adaptor -> adaptor support
# plo_group   -> setup groups of projectors
# plo_rotate  -> rotate the projectors
# plo_window  -> extract the projectors within a given energy window
# plo_orthog  -> orthogonalize the projectors
# plo_diag    -> orthogonalizes a projector defined by a rectangular matrix
# plo_ovlp    -> calculate overlap matrix
# plo_dm      -> calculate density matrix
# plo_hamk    -> calculate local hamiltonian
# plo_dos     -> calculate density of states
# view_ovlp   -> show overlap matrix
# view_dm     -> show density matrix
# view_hamk   -> show local hamiltonian
# view_dos    -> show density of states
#
include("plo.jl")
#
export plo_adaptor
export plo_group
export plo_rotate
export plo_window
export plo_orthog
export plo_diag
export plo_ovlp
export plo_dm
export plo_hamk
export plo_dos
export view_ovlp
export view_dm
export view_hamk
export view_dos

#
# tetra.jl
#
# implementation of analytical tetrahedron method
#
# summary:
#
#
include("tetra.jl")

#
# vasp.jl
#
# adaptor for the vasp software package. it provide a lot of functions
# to deal with the vasp-related files
#
# summary:
#
# vasp_adaptor   -> adaptor support
# vasp_init      -> prepare vasp's input files
# vasp_run       -> execute vasp program
# vasp_save      -> backup vasp's output files
# vasp_incar     -> make essential input file (INCAR)
# vasp_kpoints   -> make essential input file (KPOINTS)
# vasp_files     -> check essential output files
# vaspio_lattice -> read lattice information
# vaspio_kmesh   -> read kmesh
# vaspio_tetra   -> read tetrahedra
# vaspio_eigen   -> read eigenvalues
# vaspio_projs   -> read projectors
# vaspio_fermi   -> read fermi level
# vaspio_charge  -> read charge density
#
include("vasp.jl")
#
export vasp_adaptor
export vasp_init
export vasp_run
export vasp_save
export vasp_incar
export vasp_kpoints
export vasp_files
export vaspio_lattice
export vaspio_kmesh
export vaspio_tetra
export vaspio_eigen
export vaspio_projs
export vaspio_fermi
export vaspio_charge

"""
    __init__()

This function would be executed immediately after the module is loaded at
runtime for the first time
"""
function __init__() end

end
